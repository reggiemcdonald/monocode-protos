// Code generated by protoc-gen-go. DO NOT EDIT.
// source: container_host.proto

/*
Package containerhost is a generated protocol buffer package.

It is generated from these files:
	container_host.proto

It has these top-level messages:
	StartProcessRequest
	StopProcessRequest
	StartProcessRequestResponse
	StopProcessRequestResponse
*/
package containerhost

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The command plus arguments.
type StartProcessRequest struct {
	Cmd  string   `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *StartProcessRequest) Reset()                    { *m = StartProcessRequest{} }
func (m *StartProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*StartProcessRequest) ProtoMessage()               {}
func (*StartProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartProcessRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *StartProcessRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// The ID of the command to stop.
type StopProcessRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopProcessRequest) Reset()                    { *m = StopProcessRequest{} }
func (m *StopProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*StopProcessRequest) ProtoMessage()               {}
func (*StopProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StopProcessRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Contains an ID for the process created as a result of
// executing the command, as well as a chunk of the stdout/stderr output.
type StartProcessRequestResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *StartProcessRequestResponse) Reset()                    { *m = StartProcessRequestResponse{} }
func (m *StartProcessRequestResponse) String() string            { return proto.CompactTextString(m) }
func (*StartProcessRequestResponse) ProtoMessage()               {}
func (*StartProcessRequestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartProcessRequestResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartProcessRequestResponse) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type StopProcessRequestResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopProcessRequestResponse) Reset()                    { *m = StopProcessRequestResponse{} }
func (m *StopProcessRequestResponse) String() string            { return proto.CompactTextString(m) }
func (*StopProcessRequestResponse) ProtoMessage()               {}
func (*StopProcessRequestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StopProcessRequestResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*StartProcessRequest)(nil), "monocode.proto.containerhost.StartProcessRequest")
	proto.RegisterType((*StopProcessRequest)(nil), "monocode.proto.containerhost.StopProcessRequest")
	proto.RegisterType((*StartProcessRequestResponse)(nil), "monocode.proto.containerhost.StartProcessRequestResponse")
	proto.RegisterType((*StopProcessRequestResponse)(nil), "monocode.proto.containerhost.StopProcessRequestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContainerHost service

type ContainerHostClient interface {
	// Execute a command in the container.
	StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (ContainerHost_StartProcessClient, error)
	// Kill a process using the command ID.
	StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessRequestResponse, error)
}

type containerHostClient struct {
	cc *grpc.ClientConn
}

func NewContainerHostClient(cc *grpc.ClientConn) ContainerHostClient {
	return &containerHostClient{cc}
}

func (c *containerHostClient) StartProcess(ctx context.Context, in *StartProcessRequest, opts ...grpc.CallOption) (ContainerHost_StartProcessClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ContainerHost_serviceDesc.Streams[0], c.cc, "/monocode.proto.containerhost.ContainerHost/StartProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &containerHostStartProcessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContainerHost_StartProcessClient interface {
	Recv() (*StartProcessRequestResponse, error)
	grpc.ClientStream
}

type containerHostStartProcessClient struct {
	grpc.ClientStream
}

func (x *containerHostStartProcessClient) Recv() (*StartProcessRequestResponse, error) {
	m := new(StartProcessRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *containerHostClient) StopProcess(ctx context.Context, in *StopProcessRequest, opts ...grpc.CallOption) (*StopProcessRequestResponse, error) {
	out := new(StopProcessRequestResponse)
	err := grpc.Invoke(ctx, "/monocode.proto.containerhost.ContainerHost/StopProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContainerHost service

type ContainerHostServer interface {
	// Execute a command in the container.
	StartProcess(*StartProcessRequest, ContainerHost_StartProcessServer) error
	// Kill a process using the command ID.
	StopProcess(context.Context, *StopProcessRequest) (*StopProcessRequestResponse, error)
}

func RegisterContainerHostServer(s *grpc.Server, srv ContainerHostServer) {
	s.RegisterService(&_ContainerHost_serviceDesc, srv)
}

func _ContainerHost_StartProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerHostServer).StartProcess(m, &containerHostStartProcessServer{stream})
}

type ContainerHost_StartProcessServer interface {
	Send(*StartProcessRequestResponse) error
	grpc.ServerStream
}

type containerHostStartProcessServer struct {
	grpc.ServerStream
}

func (x *containerHostStartProcessServer) Send(m *StartProcessRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContainerHost_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerHostServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monocode.proto.containerhost.ContainerHost/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerHostServer).StopProcess(ctx, req.(*StopProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monocode.proto.containerhost.ContainerHost",
	HandlerType: (*ContainerHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopProcess",
			Handler:    _ContainerHost_StopProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartProcess",
			Handler:       _ContainerHost_StartProcess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "container_host.proto",
}

func init() { proto.RegisterFile("container_host.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0x2b,
	0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0x8a, 0xcf, 0xc8, 0x2f, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0xc9, 0xcd, 0xcf, 0xcb, 0x4f, 0xce, 0x4f, 0x49, 0x85, 0xf0, 0xf5, 0xe0, 0x8a, 0x40,
	0x6a, 0x94, 0xac, 0xb9, 0x84, 0x83, 0x4b, 0x12, 0x8b, 0x4a, 0x02, 0x8a, 0xf2, 0x93, 0x53, 0x8b,
	0x8b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x93, 0x73, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x21, 0x2e, 0x96, 0xc4, 0xa2, 0xf4, 0x62,
	0x09, 0x26, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x85, 0x4b, 0x28, 0xb8, 0x24, 0xbf,
	0x00, 0x4d, 0x2f, 0x1f, 0x17, 0x53, 0x26, 0x4c, 0x2b, 0x53, 0x66, 0x8a, 0x92, 0x33, 0x97, 0x34,
	0x16, 0x2b, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0xd1, 0x95, 0x0b, 0x89, 0x70, 0xb1,
	0x26, 0x67, 0x94, 0xe6, 0x65, 0x4b, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x04, 0x41, 0x38, 0x4a, 0x3a,
	0x5c, 0x52, 0x98, 0x56, 0xe1, 0x32, 0xc3, 0xa8, 0x9f, 0x89, 0x8b, 0xd7, 0x19, 0xe6, 0x4f, 0x8f,
	0xfc, 0xe2, 0x12, 0xa1, 0x06, 0x46, 0x2e, 0x1e, 0x64, 0x57, 0x08, 0x19, 0xea, 0xe1, 0x0b, 0x17,
	0x3d, 0x2c, 0x2e, 0x96, 0xb2, 0x24, 0x59, 0x0b, 0xcc, 0x81, 0x4a, 0x0c, 0x06, 0x8c, 0x42, 0xd5,
	0x5c, 0xdc, 0x48, 0x5e, 0x10, 0x32, 0x20, 0x64, 0x1a, 0xba, 0x6f, 0xa5, 0x2c, 0x48, 0xd5, 0x81,
	0xb0, 0xde, 0x49, 0x34, 0x4a, 0xb8, 0x20, 0x49, 0x3f, 0x3d, 0x5f, 0x1f, 0x45, 0x4f, 0x12, 0x1b,
	0xd8, 0x20, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23, 0x2e, 0x0d, 0x3a, 0x3b, 0x02, 0x00,
	0x00,
}
